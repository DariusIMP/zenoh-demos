//
// Copyright (c) 2022 ZettaScale Technology
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
//
// Contributors:
//   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
//

use async_trait::async_trait;
use zenoh_flow::async_std::sync::Arc;
use zenoh_flow::zenoh_flow_derive::ZFState;
use zenoh_flow::{Configuration, Data, Node, Source, State, ZFResult};

use zenoh_flow_example_types::ZFUsize;

#[derive(Debug)]
struct Tick;

#[derive(Debug, ZFState, Clone)]
struct TickState {
    pub count: usize,
}

#[async_trait]
impl Source for Tick {
    async fn run(&self, _context: &mut zenoh_flow::Context, state: &mut State) -> ZFResult<Data> {
        let mut my_state = state.try_get::<TickState>()?;
        let data = Data::from(ZFUsize(my_state.count));

        my_state.count = my_state.count.wrapping_add(1);

        Ok(data)
    }
}

impl Node for Tick {
    fn initialize(&self, _configuration: &Option<Configuration>) -> ZFResult<State> {
        Ok(State::from(TickState { count: 0 }))
    }

    fn finalize(&self, _state: &mut State) -> ZFResult<()> {
        Ok(())
    }
}

// Also generated by macro
zenoh_flow::export_source!(register);

fn register() -> ZFResult<Arc<dyn Source>> {
    Ok(Arc::new(Tick) as Arc<dyn Source>)
}
