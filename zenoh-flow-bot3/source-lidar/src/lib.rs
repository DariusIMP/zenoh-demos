//
// Copyright (c) 2022 ZettaScale Technology
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
//
// Contributors:
//   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
//

use async_trait::async_trait;
use hls_lfcd_lds_driver::{LFCDLaser, DEFAULT_BAUD_RATE, DEFAULT_PORT};
use std::str::FromStr;
use zenoh_flow::async_std::sync::{Arc, Mutex};
use zenoh_flow::zenoh_flow_derive::ZFState;
use zenoh_flow::{zf_spin_lock, Configuration, Data, Node, Source, State, ZFError, ZFResult};
use zenoh_flow_example_types::ros2::tb3::LaserScan;

#[derive(Debug)]
struct Lidar;

#[derive(ZFState, Clone)]
struct LidarState {
    lidar: Arc<Mutex<LFCDLaser>>,
}

impl std::fmt::Debug for LidarState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("LidarState").finish()
    }
}

#[async_trait]
impl Source for Lidar {
    async fn run(&self, _context: &mut zenoh_flow::Context, state: &mut State) -> ZFResult<Data> {
        let real_state = state.try_get::<LidarState>()?;

        let mut lidar = zf_spin_lock!(real_state.lidar);

        let reading = lidar
            .read()
            .await
            .map_err(|e| ZFError::InvalidData(format!("Unable to read from lidar: {e}")))?;

        Ok(Data::from(LaserScan(reading)))
    }
}

impl Node for Lidar {
    fn initialize(&self, configuration: &Option<Configuration>) -> ZFResult<State> {
        let (port, baud_rate) = match configuration {
            Some(configuration) => {
                let port = match configuration["port"].as_str() {
                    Some(configured_port) => configured_port,
                    None => DEFAULT_PORT,
                };
                let baud_rate = match configuration["baudrate"].as_str() {
                    Some(configured_rate) => configured_rate,
                    None => DEFAULT_BAUD_RATE,
                };
                (port, baud_rate)
            }
            None => (DEFAULT_PORT, DEFAULT_BAUD_RATE),
        };

        let baud_rate = u32::from_str(baud_rate).map_err(|e| {
            ZFError::ConfigurationError(format!("Unable to convert baud_rate: {e}"))
        })?;

        let lidar = LFCDLaser::new(port.to_string(), baud_rate)
            .map_err(|e| ZFError::ConfigurationError(format!("Unable to open lidar: {e}")))?;
        let state = LidarState {
            lidar: Arc::new(Mutex::new(lidar)),
        };
        Ok(State::from(state))
    }

    fn finalize(&self, _state: &mut State) -> ZFResult<()> {
        Ok(())
    }
}

// Also generated by macro
zenoh_flow::export_source!(register);

fn register() -> ZFResult<Arc<dyn Source>> {
    Ok(Arc::new(Lidar) as Arc<dyn Source>)
}
